[{"/Users/ninawelsh/Desktop/Coding Bootcamp/Assignments/Test/witnes/src/index.js":"1","/Users/ninawelsh/Desktop/Coding Bootcamp/Assignments/Test/witnes/src/App.js":"2","/Users/ninawelsh/Desktop/Coding Bootcamp/Assignments/Test/witnes/src/views/Home.js":"3","/Users/ninawelsh/Desktop/Coding Bootcamp/Assignments/Test/witnes/src/utils/GlobalState.js":"4","/Users/ninawelsh/Desktop/Coding Bootcamp/Assignments/Test/witnes/src/components/DeclarationForm/index.js":"5","/Users/ninawelsh/Desktop/Coding Bootcamp/Assignments/Test/witnes/src/components/LoginForm/index.js":"6","/Users/ninawelsh/Desktop/Coding Bootcamp/Assignments/Test/witnes/src/views/User.js":"7","/Users/ninawelsh/Desktop/Coding Bootcamp/Assignments/Test/witnes/src/components/SignupForm/index.js":"8","/Users/ninawelsh/Desktop/Coding Bootcamp/Assignments/Test/witnes/src/components/UpdateDetailsForm/index.js":"9","/Users/ninawelsh/Desktop/Coding Bootcamp/Assignments/Test/witnes/src/components/RequestForm/index.js":"10","/Users/ninawelsh/Desktop/Coding Bootcamp/Assignments/Test/witnes/src/components/Document/index.js":"11","/Users/ninawelsh/Desktop/Coding Bootcamp/Assignments/Witness/client/src/index.js":"12","/Users/ninawelsh/Desktop/Coding Bootcamp/Assignments/Witness/client/src/App.js":"13","/Users/ninawelsh/Desktop/Coding Bootcamp/Assignments/Witness/client/src/views/Home.js":"14","/Users/ninawelsh/Desktop/Coding Bootcamp/Assignments/Witness/client/src/components/Login/index.js":"15","/Users/ninawelsh/Desktop/Coding Bootcamp/Assignments/Witness/client/src/components/Request/index.js":"16","/Users/ninawelsh/Desktop/Coding Bootcamp/Assignments/Witness/client/src/components/Signup/index.js":"17","/Users/ninawelsh/Desktop/Coding Bootcamp/Assignments/Witness/client/src/components/UpdateDetails/index.js":"18","/Users/ninawelsh/Desktop/Coding Bootcamp/Assignments/Witness/client/src/components/CreateDeclaration/index.js":"19","/Users/ninawelsh/Desktop/Coding Bootcamp/Assignments/Witness/client/src/utils/setAuthToken.js":"20","/Users/ninawelsh/Desktop/Coding Bootcamp/Assignments/Witness/client/src/utils/userFunctions.js":"21","/Users/ninawelsh/Desktop/Coding Bootcamp/Assignments/Witness/client/src/store/index.js":"22","/Users/ninawelsh/Desktop/Coding Bootcamp/Assignments/Witness/client/src/store/GlobalState.js":"23","/Users/ninawelsh/Desktop/Coding Bootcamp/Assignments/Witness/client/src/utils/blockchainAPI.js":"24","/Users/ninawelsh/Desktop/Coding Bootcamp/Assignments/Witness/client/src/utils/generateMarkdown.js":"25","/Users/ninawelsh/Desktop/Coding Bootcamp/Assignments/Witness/client/src/utils/types.js":"26","/Users/ninawelsh/Desktop/Coding Bootcamp/Assignments/Witness/client/src/components/Navbar/index.js":"27","/Users/ninawelsh/Desktop/Coding Bootcamp/Assignments/Witness/client/src/views/Dashboard.js":"28","/Users/ninawelsh/Desktop/Coding Bootcamp/Assignments/Witness/client/src/utils/documentFunctions.js":"29","/Users/ninawelsh/Desktop/Coding Bootcamp/Assignments/Witness/client/src/components/DisplayDeclaration/index.js":"30","/Users/ninawelsh/Desktop/Coding Bootcamp/Assignments/Witness/client/src/utils/geocodingAPI.js":"31"},{"size":147,"mtime":1611550827226,"results":"32","hashOfConfig":"33"},{"size":2100,"mtime":1611699643181,"results":"34","hashOfConfig":"33"},{"size":204,"mtime":1611546012039,"results":"35","hashOfConfig":"33"},{"size":1489,"mtime":1611697795652,"results":"36","hashOfConfig":"33"},{"size":1982,"mtime":1611703931568,"results":"37","hashOfConfig":"33"},{"size":1777,"mtime":1611699837092,"results":"38","hashOfConfig":"33"},{"size":3445,"mtime":1611700193804,"results":"39","hashOfConfig":"33"},{"size":126,"mtime":1611699608344,"results":"40","hashOfConfig":"33"},{"size":4243,"mtime":1611706421083,"results":"41","hashOfConfig":"33"},{"size":129,"mtime":1611699602201,"results":"42","hashOfConfig":"33"},{"size":124,"mtime":1611699594897,"results":"43","hashOfConfig":"33"},{"size":147,"mtime":1612150280458,"results":"44","hashOfConfig":"45"},{"size":1403,"mtime":1613082247672,"results":"46","hashOfConfig":"45"},{"size":5001,"mtime":1613082130430,"results":"47","hashOfConfig":"45"},{"size":4470,"mtime":1613082187306,"results":"48","hashOfConfig":"45"},{"size":2850,"mtime":1613030143004,"results":"49","hashOfConfig":"45"},{"size":14912,"mtime":1613085674970,"results":"50","hashOfConfig":"45"},{"size":6060,"mtime":1613030252266,"results":"51","hashOfConfig":"45"},{"size":10741,"mtime":1613089449668,"results":"52","hashOfConfig":"45"},{"size":992,"mtime":1612398542983,"results":"53","hashOfConfig":"45"},{"size":1029,"mtime":1613031113944,"results":"54","hashOfConfig":"45"},{"size":616,"mtime":1612218344730,"results":"55","hashOfConfig":"45"},{"size":1007,"mtime":1612998916528,"results":"56","hashOfConfig":"45"},{"size":1976,"mtime":1612754388136,"results":"57","hashOfConfig":"45"},{"size":691,"mtime":1612911151472,"results":"58","hashOfConfig":"45"},{"size":147,"mtime":1612998926140,"results":"59","hashOfConfig":"45"},{"size":2284,"mtime":1613035254144,"results":"60","hashOfConfig":"45"},{"size":4473,"mtime":1613082555832,"results":"61","hashOfConfig":"45"},{"size":416,"mtime":1613012379388,"results":"62","hashOfConfig":"45"},{"size":1455,"mtime":1613089844915,"results":"63","hashOfConfig":"45"},{"size":804,"mtime":1613085688087,"results":"64","hashOfConfig":"45"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"zabqj2",{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},"pkgoqq",{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"89"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"89"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"89"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"89"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"89"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"89"},"/Users/ninawelsh/Desktop/Coding Bootcamp/Assignments/Test/witnes/src/index.js",[],"/Users/ninawelsh/Desktop/Coding Bootcamp/Assignments/Test/witnes/src/App.js",[],"/Users/ninawelsh/Desktop/Coding Bootcamp/Assignments/Test/witnes/src/views/Home.js",[],"/Users/ninawelsh/Desktop/Coding Bootcamp/Assignments/Test/witnes/src/utils/GlobalState.js",[],"/Users/ninawelsh/Desktop/Coding Bootcamp/Assignments/Test/witnes/src/components/DeclarationForm/index.js",["134"],"/Users/ninawelsh/Desktop/Coding Bootcamp/Assignments/Test/witnes/src/components/LoginForm/index.js",["135","136"],"/Users/ninawelsh/Desktop/Coding Bootcamp/Assignments/Test/witnes/src/views/User.js",["137"],"/Users/ninawelsh/Desktop/Coding Bootcamp/Assignments/Test/witnes/src/components/SignupForm/index.js",[],"/Users/ninawelsh/Desktop/Coding Bootcamp/Assignments/Test/witnes/src/components/UpdateDetailsForm/index.js",["138"],"/Users/ninawelsh/Desktop/Coding Bootcamp/Assignments/Test/witnes/src/components/RequestForm/index.js",[],"/Users/ninawelsh/Desktop/Coding Bootcamp/Assignments/Test/witnes/src/components/Document/index.js",[],"/Users/ninawelsh/Desktop/Coding Bootcamp/Assignments/Witness/client/src/index.js",[],["139","140"],"/Users/ninawelsh/Desktop/Coding Bootcamp/Assignments/Witness/client/src/App.js",[],"/Users/ninawelsh/Desktop/Coding Bootcamp/Assignments/Witness/client/src/views/Home.js",[],"/Users/ninawelsh/Desktop/Coding Bootcamp/Assignments/Witness/client/src/components/Login/index.js",[],"/Users/ninawelsh/Desktop/Coding Bootcamp/Assignments/Witness/client/src/components/Request/index.js",["141","142"],"import { Form, Space, Input, Button, Select, Typography } from 'antd';\nimport { SendOutlined } from '@ant-design/icons';\nimport TextArea from 'antd/lib/input/TextArea';\nimport { useAppContext } from '../../store';\n\nconst { Title, Text } = Typography;\nconst { Option } = Select;\n\n\nfunction Request() {\n    const [state, appDispatch] = useAppContext();\n\n    return (\n        <Form\n            layout=\"horizontal\"\n        >\n            <Space direction=\"vertical\">\n                <Title level={2} style={{ paddingBottom: '25px' }}>Request a Statutory Declaration</Title>\n                <Text>Fill in the details below and an email with a link will be sent to the intended receipient.</Text>\n                <br></br>\n                <Input.Group compact>\n                    <Form.Item label=\"To:\" name=\"receipent_name\">\n                        <Input style={{ width: 250 }} placeholder=\"First Name\" />\n                        <Input style={{ width: 250 }} placeholder=\"Last Name\" />\n                    </Form.Item>\n                    <Form.Item label=\"Email:\" name=\"receipent_email\">\n                        <Input style={{ width: 500 }} placeholder=\"address@email.com.au\" />\n                    </Form.Item>\n                    <Form.Item label=\"Type:\" name=\"category\">\n                        <Select style={{ width: 500 }} defaultValue=\"Certification of Injury or Illness\">\n                            <Option value=\"Certification of Injury or Illness\">Certification of Injury or Illness</Option>\n                            <Option value=\"Certification of Injury/Illness/Death of Family Member\">Certification of Injury/Illness/Death of Family Member</Option>\n                            <Option value=\"Confirmation of Personal Details\">Confirmation of Personal Details</Option>\n                            <Option value=\"Confirmation of Financial Expenditure\">Confirmation of Financial Expenditure</Option>\n                            <Option value=\"Statement as Witness to Event\">Statement as Witness to Event</Option>\n                            <Option value=\"Statement as to Involvement in an Event\">Statement as to Involvement in an Event</Option>\n                            <Option value=\"Contractual Agreement\">Contractual Agreement</Option>\n                            <Option value=\"Other\">Other</Option>\n                        </Select>\n                    </Form.Item>\n                    <Form.Item label=\"Additional Information/ Requirements:\" name=\"details\">\n                        <TextArea style={{ width: 500 }} row={5} />\n                    </Form.Item>\n                </Input.Group>\n                <Form.Item name=\"Submit\">\n                    <Button type=\"primary\" shape=\"round\" icon={<SendOutlined />}>Submit</Button>\n                </Form.Item>\n            </Space>\n        </Form>\n    )\n}\n\nexport default Request;","/Users/ninawelsh/Desktop/Coding Bootcamp/Assignments/Witness/client/src/components/Signup/index.js",["143"],"import { Layout, Row, Col, Form, Input, Button, Select, Typography, message, AutoComplete } from 'antd';\nimport { RightCircleOutlined } from '@ant-design/icons';\nimport React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { registerUser, getUsers } from '../../utils/userFunctions';\nimport states from '../../data/states.json';\nimport occupations from '../../data/occupationlist.json';\nimport API from '../../utils/blockchainAPI';\n\nconst { Option } = Select;\nconst { Content } = Layout;\nconst { Title } = Typography;\nconst layout = {\n    labelCol: {\n        span: 8,\n    },\n    wrapperCol: {\n        span: 14,\n    },\n};\nconst tailLayout = {\n    wrapperCol: {\n        offset: 8,\n        span: 16,\n    },\n};\n\nfunction Signup() {\n    const history = useHistory();\n\n    const [registerState, setRegisterState] = useState({\n        first_name: '',\n        last_name: '',\n        email: '',\n        password: '',\n        state: '',\n        postcode: '',\n        suburb: '',\n        street: '',\n        street_no: '',\n        occupation: '',\n        IOTA_seed: '',\n        IOTA_address: '',\n        alerts: '',\n        formIsValid: true,\n    });\n\n    // updates global state when data is entered into any of the inputs\n    const onChange = (event) => {\n        setRegisterState({ ...registerState, [event.target.name]: event.target.value });\n    };\n\n    // updates global state when data is selected from any of the select options\n    const onSelect = (value) => {\n        (value.key.length > 3) ?\n            setRegisterState({ ...registerState, occupation: value.key })\n            :\n            setRegisterState({ ...registerState, state: value.key })\n    };\n\n    // generates random seed\n    const generateSeed = () => {\n        // IOTA seed must be 81 characters and can include letters and the number 9\n        const options = '9ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n        let seed = '';\n        // randomised selection\n        for (let i = 0; i < 81; i++) {\n            seed += options.charAt(parseInt(Math.random() * options.length))\n        };\n        return seed;\n    }\n\n    // on form submit\n    const handleSubmit = () => {\n        let alerts = '';\n        const userData = {\n            first_name: registerState.first_name,\n            last_name: registerState.last_name,\n            email: registerState.email,\n            password: registerState.password,\n            street_no: registerState.street_no,\n            street: registerState.street,\n            suburb: registerState.suburb,\n            state: registerState.state,\n            postcode: registerState.postcode,\n            occupation: registerState.occupation\n        };\n        // current registered user information is pulled from the database\n        getUsers().then((data) => {\n            // compares all current registered user emails against inputted email\n            var alreadyRegisteredUser = data\n                .find((element) => element.email === registerState.email)\n            // if email does not exist in the database\n            if (!alreadyRegisteredUser) {\n                // generate random seed for new user \n                let seed = generateSeed();\n                // generate an IOTA blockchain address from seed\n                API.generateNewAddress(seed)\n                    .then((address) => {\n                        userData.IOTA_seed = seed;\n                        userData.IOTA_address = address;\n                        // registers user and redirects to login page\n                        registerUser(userData)\n                            .then((res) => {\n                                alerts = { type: res.data.type, message: res.data.message };\n                                setRegisterState({ ...registerState, alerts });\n                                console.log('Form submitted' + res);\n                                history.push('/login');\n                            })\n                            .catch((error) => {\n                                alerts = { type: error.response.data.type, message: error.response.data.message };\n                                setRegisterState({ ...registerState, alerts });\n                            })\n                    })\n            }\n            else {\n                // If user already exists, alerts user\n                alerts = { type: 'error', message: 'User already existed. Please login' };\n                setRegisterState({ ...registerState, alerts });\n            }\n        }).catch((error) => {\n            alerts = { type: error.response.data.type, message: error.response.data.message };\n            setRegisterState({ ...registerState, alerts });\n        })\n    };\n\n    const onFinishFailed = (errorInfo) => {\n        let alerts = {};\n        alerts = { type: 'error', message: 'Please complete all form fields' };\n        setRegisterState({ ...registerState, alerts });\n        console.log('Failed:', errorInfo);\n    };\n\n    return (\n        <Content className=\"content\" >\n            {registerState.alerts ?\n                message[registerState.alerts.type](registerState.alerts.message).then(setRegisterState({ ...registerState, alerts: '' }))\n                :\n                <div></div>\n            }\n            <Row>\n                <Col span={12} offset={6}>\n                    <Form\n                        noValidate\n                        {...layout}\n                        onFinish={handleSubmit}\n                        onFinishFailed={onFinishFailed}\n                    >\n                        <Title level={2} style={{ textAlign: 'center', paddingBottom: '25px' }}>Sign up</Title>\n\n                        <Form.Item\n                            name=\"first_name\"\n                            label=\"First Name\"\n                            rules={[\n                                {\n                                    type: 'string',\n                                    required: true,\n                                    message: 'Please input your first name!',\n                                },\n                            ]}\n                        ><Input\n                                name=\"first_name\"\n                                placeholder=\"Enter First Name\"\n                                value={registerState.first_name}\n                                onChange={onChange} />\n                        </Form.Item>\n\n                        <Form.Item\n                            name=\"last_name\"\n                            label=\"Last Name\"\n                            rules={[\n                                {\n                                    type: 'string',\n                                    required: true,\n                                    message: 'Please input your last name!',\n                                },\n                            ]}\n                        ><Input\n                                name=\"last_name\"\n                                placeholder=\"Enter Last Name\"\n                                value={registerState.last_name}\n                                onChange={onChange} />\n                        </Form.Item>\n\n                        <Form.Item\n                            name=\"street_no\"\n                            label=\"Street No.\"\n                            rules={[\n                                {\n                                    required: true,\n                                    message: 'Please input your street number!',\n                                },\n                            ]}\n                        ><Input\n                                style={{ width: 120 }}\n                                name=\"street_no\"\n                                value={registerState.street_no}\n                                onChange={onChange} />\n                        </Form.Item>\n\n                        <Form.Item\n                            name=\"street\"\n                            label=\"Street\"\n                            rules={[\n                                {\n                                    type: 'string',\n                                    required: true,\n                                    message: 'Please input your street!',\n                                },\n                            ]}\n                        ><Input\n                                name=\"street\"\n                                placeholder=\"Enter Street Name\"\n                                value={registerState.street}\n                                onChange={onChange}\n                            />\n                        </Form.Item>\n\n                        <Form.Item\n                            name=\"suburb\"\n                            label=\"Suburb\"\n                            rules={[\n                                {\n                                    type: 'string',\n                                    required: true,\n                                    message: 'Please input your suburb!',\n                                },\n                            ]}\n                        ><Input\n                                name=\"suburb\"\n                                placeholder=\"Enter Suburb\"\n                                value={registerState.suburb}\n                                onChange={onChange} />\n                        </Form.Item>\n\n                        <Form.Item\n                            name=\"state\"\n                            label=\"State\"\n                            rules={[\n                                {\n                                    required: true,\n                                    message: 'Please select your state!',\n                                },\n                            ]}\n                        ><Select\n                            style={{ width: 120 }}\n                            labelInValue\n                            name=\"state\"\n                            onChange={onSelect}>\n                                {states.map(state =>\n                                    <Option value={state}>{state}</Option>\n                                )}\n                            </Select>\n                        </Form.Item>\n\n                        <Form.Item\n                            name=\"postcode\"\n                            label=\"Postcode\"\n                            rules={[\n                                {\n                                    required: true,\n                                    message: 'Please enter your postcode!',\n                                },\n                            ]}\n                        ><Input\n                                style={{ width: 120 }}\n                                name=\"postcode\"\n                                value={registerState.postcode}\n                                onChange={onChange} />\n                        </Form.Item>\n\n                        <Form.Item\n                            name=\"occupation\"\n                            label=\"Occupation\"\n                            rules={[\n                                {\n                                    required: true,\n                                    message: 'Please select your occupation!',\n                                },\n                            ]}\n                        ><Select\n                            showSearch\n                            labelInValue\n                            name=\"occupation\"\n                            placeholder=\"Select an occupation\"\n                            onChange={onSelect}\n                            filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}>\n                                {occupations.map(occupation =>\n                                    <Option value={occupation}>{occupation}</Option>\n                                )}\n                            </Select>\n                        </Form.Item>\n\n                        <Form.Item\n                            name=\"email\"\n                            label=\"Email\"\n                            rules={[\n                                {\n                                    type: 'email',\n                                    required: true,\n                                    message: 'Please input your email!',\n                                },\n                            ]}\n                        ><Input\n                                name=\"email\"\n                                placeholder=\"Enter Email Address\"\n                                value={registerState.email}\n                                onChange={onChange} />\n                        </Form.Item>\n\n                        <Form.Item\n                            name=\"password\"\n                            label=\"Password\"\n                            rules={[\n                                {\n                                    min: 8,\n                                    required: true,\n                                    message: 'Please input a valid password',\n                                },\n                            ]}\n                        ><Input.Password\n                                name=\"password\"\n                                placeholder=\"Must contain min 8 mixed characters\"\n                                value={registerState.password}\n                                onChange={onChange} />\n                        </Form.Item>\n\n                        <Form.Item\n                            name=\"confirm\"\n                            label=\"Confirm Password\"\n                            dependencies={['password']}\n                            hasFeedback\n                            rules={[\n                                {\n                                    required: true,\n                                    message: 'Please confirm your password!',\n                                },\n                                ({ getFieldValue }) => ({\n                                    validator(_, value) {\n                                        if (!value || getFieldValue('password') === value) {\n                                            return Promise.resolve();\n                                        }\n\n                                        return Promise.reject('The two passwords that you entered do not match!');\n                                    },\n                                }),\n                            ]}\n                        ><Input.Password\n                                placeholder=\"Confirm Password\" />\n                        </Form.Item>\n\n                        <Form.Item {...tailLayout}>\n                            <Button type=\"primary\" shape=\"round\" icon={<RightCircleOutlined />} htmlType=\"submit\" >\n                                Sign up\n                            </Button>\n                        </Form.Item>\n                    </Form>\n                </Col>\n            </Row>\n        </Content >\n    );\n};\n\nexport default Signup;","/Users/ninawelsh/Desktop/Coding Bootcamp/Assignments/Witness/client/src/components/UpdateDetails/index.js",[],"/Users/ninawelsh/Desktop/Coding Bootcamp/Assignments/Witness/client/src/components/CreateDeclaration/index.js",["144"],"/Users/ninawelsh/Desktop/Coding Bootcamp/Assignments/Witness/client/src/utils/setAuthToken.js",[],"/Users/ninawelsh/Desktop/Coding Bootcamp/Assignments/Witness/client/src/utils/userFunctions.js",[],"/Users/ninawelsh/Desktop/Coding Bootcamp/Assignments/Witness/client/src/store/index.js",[],"/Users/ninawelsh/Desktop/Coding Bootcamp/Assignments/Witness/client/src/store/GlobalState.js",["145"],"import { isEmpty } from 'lodash';\nimport { SET_CURRENT_USER, USER_LOADING, REFRESH_DETAILS } from '../utils/types';\nimport jwt_decode from 'jwt-decode';\n\nconst getToken = () => {\n    const token = localStorage.getItem('userToken');\n    if (token) {\n        const decodedToken = jwt_decode(token);\n        return decodedToken;\n    }\n    return {};\n}\n\nexport const appInitialState = {\n    isAuthenticated: false,\n    user: getToken(),\n    loading: false,\n    errors: {}\n};\n\nexport function appReducer(state = appInitialState, action) {\n    switch (action.type) {\n        case SET_CURRENT_USER:\n            return {\n                ...state,\n                isAuthenticated: !isEmpty(action.payload),\n                user: action.payload,\n            };\n        case USER_LOADING:\n            return {\n                ...state,\n                loading: true,\n            };\n        case REFRESH_DETAILS:\n            return {\n                ...state,\n                user: action.payload,\n            }\n    }\n}","/Users/ninawelsh/Desktop/Coding Bootcamp/Assignments/Witness/client/src/utils/blockchainAPI.js",["146"],"const Iota = require('@iota/core');\nconst Converter = require('@iota/converter');\nconst Extract = require('@iota/extract-json');\n\nconst iota = Iota.composeAPI({\n    provider: 'https://nodes.devnet.iota.org:443'\n});\n\nconst depth = 3;\nconst minimumWeightMagnitude = 9;\nconst securityLevel = 2;\n\nexport default {\n    sendToBlockchain: (address, seed, declaration) => {\n        return new Promise((function (resolve, reject) {\n            const message = JSON.stringify({ \"message\": declaration });\n            const messageInTrytes = Converter.asciiToTrytes(message);\n\n            const transfers = [\n                {\n                    value: 0,\n                    address: address,\n                    message: messageInTrytes\n                }\n            ];\n\n            iota.prepareTransfers(seed, transfers)\n                .then(trytes => {\n                    return iota.sendTrytes(trytes, depth, minimumWeightMagnitude);\n                })\n                .then(bundle => {\n                    // returns hash from the blockchain\n                    resolve(bundle[0].hash)\n                })\n                .catch(err => {\n                    reject(err)\n                });\n        }))\n    },\n\n    extractFromBlockchain: (tailTransactionHash) => {\n        return new Promise((function (resolve, reject) {\n            iota.getBundle(tailTransactionHash)\n                .then(bundle => {\n                    resolve(JSON.parse(Extract.extractJson(bundle)))\n                })\n                .catch(err => {\n                    reject(err)\n                });\n        }))\n    },\n\n    generateNewAddress: function (seed) {\n        return new Promise((function (resolve, reject) {\n            iota.getNewAddress(seed, { index: 0, securityLevel: securityLevel, total: 1 })\n                .then(address => {\n                    resolve(address)\n                })\n                .catch(err => {\n                    reject(err)\n                });\n        }))\n    }\n}","/Users/ninawelsh/Desktop/Coding Bootcamp/Assignments/Witness/client/src/utils/generateMarkdown.js",[],"/Users/ninawelsh/Desktop/Coding Bootcamp/Assignments/Witness/client/src/utils/types.js",[],"/Users/ninawelsh/Desktop/Coding Bootcamp/Assignments/Witness/client/src/components/Navbar/index.js",[],"/Users/ninawelsh/Desktop/Coding Bootcamp/Assignments/Witness/client/src/views/Dashboard.js",["147"],"import { useState } from 'react';\nimport { BrowserRouter as Router, Route, Link, Switch, useHistory } from 'react-router-dom';\nimport { Row, Col, Layout, Menu } from 'antd';\nimport { UserOutlined, FileOutlined, IdcardOutlined, FileAddOutlined, MailOutlined } from '@ant-design/icons';\nimport CreateDeclaration from '../components/CreateDeclaration';\nimport UpdateDetails from '../components/UpdateDetails';\nimport DisplayDeclaration from '../components/DisplayDeclaration';\nimport Request from '../components/Request';\nimport { useAppContext } from '../store';\nimport { useLoginCheck } from '../utils/setAuthToken';\nimport API from '../utils/blockchainAPI';\nimport './style.css'\n\nconst { Content, Sider } = Layout;\nconst { SubMenu } = Menu;\n\n\nfunction Dashboard() {\n    const history = useHistory();\n    const [state, appDispatch] = useAppContext();\n\n    const [documentState, setDocumentState] = useState({\n        hash: '',\n        content: '',\n        title: ''\n    });\n\n    useLoginCheck(appDispatch);\n\n    const handleDocumentSelect = (e) => {\n        const hash = e.key;\n        const title = e.item.props.name;\n        API.extractFromBlockchain(hash).then((document) => {\n            const content = document.message;\n            setDocumentState({ ...documentState, hash, content, title })\n        })\n    }\n\n    return (\n        <Layout >\n            <Router>\n                <Sider className=\"site-layout-background\" width={250} breakpoint=\"lg\"\n                    collapsedWidth=\"0\"\n                    onBreakpoint={broken => { console.log(broken); }}\n                    onCollapse={(collapsed, type) => { console.log(collapsed, type); }}>\n                    <Menu\n                        mode=\"inline\"\n                        defaultSelectedKeys={['1']}\n                        defaultOpenKeys={['sub1']}\n                        style={{ height: '100%' }}\n                    >\n                        <SubMenu key=\"sub1\" icon={<UserOutlined />} title={state.user.first_name + ' ' + state.user.last_name}>\n                            <Menu.Item key=\"2\" icon={<IdcardOutlined />}><Link to=\"/user/update\">Update Details</Link></Menu.Item>\n                        </SubMenu>\n                        <SubMenu key=\"sub2\" icon={<FileOutlined />} title=\"Documents\">\n                            {(state.user.documents ?\n                                state.user.documents.map(document =>\n                                    <Menu.Item\n                                        name={document.title}\n                                        key={document.hash}\n                                        onClick={handleDocumentSelect}\n                                    ><Link to=\"/user/document\">{document.title}</Link></Menu.Item>)\n                                :\n                                <Menu.Item key=\"noDocuments\">You have no documents</Menu.Item>\n                            )}\n                        </SubMenu>\n                        < Menu.Item key=\"3\" icon={<FileAddOutlined />}><Link to=\"/user/declaration\">Create New Document</Link></Menu.Item>\n                        < Menu.Item key=\"4\" icon={<MailOutlined />}><Link to=\"/user/request\">Request Document</Link></Menu.Item>\n                    </Menu>\n                </Sider >\n                <Content className=\"content\" >\n                    <Row>\n                        <Col span={20} offset={2}>\n                            <Switch>\n                                <Route exact path=\"/user/update\">\n                                    <UpdateDetails />\n                                </Route>\n                                <Route exact path=\"/user/document\">\n                                    <DisplayDeclaration\n                                        hash={documentState.hash}\n                                        title={documentState.title}\n                                        content={documentState.content} />\n                                </Route>\n                                <Route exact path=\"/user/declaration\">\n                                    <CreateDeclaration />\n                                </Route>\n                                <Route exact path=\"/user/request\">\n                                    <Request />\n                                </Route>\n                            </Switch>\n                        </Col>\n                    </Row>\n                </Content>\n            </Router>\n        </Layout >\n    )\n};\n\nexport default Dashboard;","/Users/ninawelsh/Desktop/Coding Bootcamp/Assignments/Witness/client/src/utils/documentFunctions.js",[],"/Users/ninawelsh/Desktop/Coding Bootcamp/Assignments/Witness/client/src/components/DisplayDeclaration/index.js",[],"/Users/ninawelsh/Desktop/Coding Bootcamp/Assignments/Witness/client/src/utils/geocodingAPI.js",["148"],"import axios from \"axios\";\n\nconst API_KEY = 'AIzaSyCHR4pzxUoksFuNAA1Wkp0Xs7qmdn9wlKI';\n\nexport const getLocation = (lat, long) => {\n    return new Promise((function (resolve, reject) {\n        const options = {\n            method: 'GET',\n            url: `https://maps.googleapis.com/maps/api/geocode/json?latlng=${lat},${long}&key=${API_KEY}`,\n        };\n\n        axios.request(options)\n            .then(function (response) {\n                response.data.results.map((address) => {\n                    if (address.types[0] === \"locality\") {\n                        resolve(address.address_components[0].long_name + \", \" + address.address_components[2].long_name)\n                    }\n                })\n            }).catch(function (error) {\n                reject(error);\n            });\n    }))\n}\n",{"ruleId":"149","severity":1,"message":"150","line":9,"column":19,"nodeType":"151","messageId":"152","endLine":9,"endColumn":27},{"ruleId":"149","severity":1,"message":"153","line":1,"column":10,"nodeType":"151","messageId":"152","endLine":1,"endColumn":13},{"ruleId":"149","severity":1,"message":"154","line":1,"column":15,"nodeType":"151","messageId":"152","endLine":1,"endColumn":18},{"ruleId":"149","severity":1,"message":"150","line":16,"column":19,"nodeType":"151","messageId":"152","endLine":16,"endColumn":27},{"ruleId":"149","severity":1,"message":"155","line":5,"column":27,"nodeType":"151","messageId":"152","endLine":5,"endColumn":31},{"ruleId":"156","replacedBy":"157"},{"ruleId":"158","replacedBy":"159"},{"ruleId":"149","severity":1,"message":"160","line":11,"column":12,"nodeType":"151","messageId":"152","endLine":11,"endColumn":17},{"ruleId":"149","severity":1,"message":"161","line":11,"column":19,"nodeType":"151","messageId":"152","endLine":11,"endColumn":30},{"ruleId":"149","severity":1,"message":"162","line":1,"column":78,"nodeType":"151","messageId":"152","endLine":1,"endColumn":90},{"ruleId":"163","severity":1,"message":"164","line":37,"column":8,"nodeType":"165","endLine":37,"endColumn":10,"suggestions":"166"},{"ruleId":"167","severity":1,"message":"168","line":22,"column":5,"nodeType":"169","messageId":"170","endLine":39,"endColumn":6},{"ruleId":"171","severity":1,"message":"172","line":13,"column":1,"nodeType":"173","endLine":64,"endColumn":2},{"ruleId":"149","severity":1,"message":"174","line":19,"column":11,"nodeType":"151","messageId":"152","endLine":19,"endColumn":18},{"ruleId":"175","severity":1,"message":"176","line":14,"column":53,"nodeType":"177","messageId":"178","endLine":14,"endColumn":55},"no-unused-vars","'dispatch' is assigned a value but never used.","Identifier","unusedVar","'Row' is defined but never used.","'Col' is defined but never used.","'Text' is assigned a value but never used.","no-native-reassign",["179"],"no-negated-in-lhs",["180"],"'state' is assigned a value but never used.","'appDispatch' is assigned a value but never used.","'AutoComplete' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getCurrentLocation'. Either include it or remove the dependency array.","ArrayExpression",["181"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'history' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation",{"desc":"182","fix":"183"},"Update the dependencies array to be: [getCurrentLocation]",{"range":"184","text":"185"},[1212,1214],"[getCurrentLocation]"]